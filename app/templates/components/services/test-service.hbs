<div id="services">

	<div id="services-action-bar">
		{{services/action-bar}}
	</div>

	<div id='test-service'>
		<!-- Menu -->
		<div id="test-service-wrapper">
			<header class="entry-header">
				<h1>
					Test Service
					{{#if wssConnection}}
					<button local-class="disconnect-button" class="ui right icon button" onclick={{action "disconnect"}}>
						Disconnect <i class="icon red bell slash no-side-margins"></i>
					</button>
					{{/if}}
					{{#unless wssConnection}}
					<button local-class="connect-button" class="ui right icon button" onclick={{action "connect"}}>
						Connect <i class="icon green bell no-side-margins"></i>
					</button>
					{{#if connectionError}}
					<p style="color: red; font-size: 12px; text-align: right; padding-top: 5px;">
						<i class="icon red exclamation triangle"></i>
						testActionService.js on Port 4201 might not be accessible.
						<i class="icon red exclamation triangle"></i>
					</p>
					{{/if}}
					{{/unless}}
				</h1>
			</header>

			<div id="test-service-content">
				<p>
					To test the input for ServiceActions (generated by the Payload Query), you can start a TestService. To do this, execute the startTestService.bat in the ajan-editor root folder. Afterwards you can connect to this service via connect. To see the received input of the TestService, create a new ServiceAction, change the Request-Uri to "http://localhost:4201/post" and execute it with an behavior action.
				</p>
				<h3><i class="arrow alternate circle blue down icon"></i> Received message</h3>
				<div><b style="padding-right:10px;">Date:</b> {{wssMessage.date}}</div>
				<div class="test-service-headers">
					<b>Headers:</b>
					{{#each wssMessage.headers as |header|}}
					<span style="padding-left:10px;"><i style="color:blue;">{{header.key}}:</i> "{{header.value}}"</span>
					{{/each}}
				</div>
				<div id="test-service-message">
					<button class="ui right icon button" onclick={{action "clean"}}>
						<i class="icon ban no-side-margins"></i>
					</button>
					{{wssMessage.body}}
				</div>
			</div>

			<hr>

			{{ui/message/send-message}}

			<div id="test-service-response">
				<h3><i class="arrow alternate circle green up icon"></i> Response message</h3>
				<p>
					Specify content (text/turtle) that the <b>Test Service</b> will send directly after receiving a message on its /post endpoint.
				</p>
				<div id="test-service-response-message">
					<div local-class="test-service-row-value">
						{{textarea value=response rows="6"}}
						<button data-tooltip="send Message" class="ui right icon blue button" local-class="test-service-ser-response" {{action "setResponse" response}}>
							<i class="icon save no-side-margins"></i>
						</button>
					</div>
				</div>
			</div>

			<div id="test-service-async-response">
				<h3><i class="clock outline icon green"></i><i class="arrow alternate circle green up icon"></i> Asynchronous Response message</h3>
				<p>
					Content (text/turtle) that the <b>Test Service</b> will send after <b>2 seconds</b>, if an asynchronous action (payload contains <b>actn:asyncRequestURI</b>) was received on /post.
				</p>
				<div id="test-service-async-response-message">
					<div local-class="test-service-row-value">
						{{textarea value=asyncResponse rows="6"}}
						<button data-tooltip="send Message" class="ui right icon blue button" local-class="test-service-ser-response" {{action "setAsyncResponse" asyncResponse}}>
							<i class="icon save no-side-margins"></i>
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

